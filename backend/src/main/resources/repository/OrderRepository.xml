<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.backend.repository.OrderRepository">
    <resultMap id="SeatResultMap" type="Seat">
        <id column="seat_id" property="id"/>
        <result column="seat_cinema_hall_id" property="cinemaHallId"/>
        <result column="seat_price" property="price"/>
        <result column="seat_number" property="seatNumber"/>
        <result column="seat_status" property="status"/>
    </resultMap>
    <resultMap id="OrderSeatResultMap" type="OrderSeat">
        <id column="os_id" property="id"/>
        <result column="os_order_id" property="orderId"/>
        <result column="os_price" property="price"/>
        <association property="seat" javaType="Seat" resultMap="SeatResultMap"/>
    </resultMap>
    <resultMap id="OrderResultMap" type="Order">
        <id column="order_id" property="orderId"/>
        <result column="user_id" property="userId"/>
        <result column="cinema_hall_id" property="cinemaHallId"/>
        <result column="order_status" property="orderStatus"/>
        <result column="payment_method" property="paymentMethod"/>
        <result column="payment_status" property="paymentStatus"/>
        <result column="total_amount" property="totalAmount"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <collection property="seats" resultMap="OrderSeatResultMap"/>
    </resultMap>
    <select id="findAllWithFilter" resultMap="OrderResultMap">
        SELECT o.id AS order_id,
        o.user_id,
        o.cinema_hall_id,
        o.status AS order_status,
        o.payment_method,
        o.payment_status,
        o.total_amount,
        o.created_at,
        o.updated_at,
        os.id AS os_id,
        os.order_id AS os_order_id,
        os.price AS os_price,
        s.id AS seat_id,
        s.cinema_hall_id AS seat_cinema_hall_id,
        s.seat_number AS seat_number,
        s.status AS seat_status ,
        s.price AS seat_price
        FROM orders AS o
        JOIN order_seat AS os ON o.id = os.order_id
        JOIN seat AS s ON os.seat_id = s.id
        <where>
            <if test="userId != null">
                AND o.user_id = #{userId}
            </if>
            <if test="cinemaHallId != null">
                AND o.cinema_hall_id = #{cinemaHallId}
            </if>
            <if test="orderStatus != null">
                AND o.status = #{orderStatus}
            </if>
            <if test="paymentMethod != null">
                AND o.payment_method = #{paymentMethod}
            </if>
            <if test="createdAt != null">
                AND o.created_at = #{createdAt}
            </if>
        </where>
        ORDER BY o.created_at DESC
    </select>
    <select id="findAll" resultMap="OrderResultMap">
        SELECT o.id             AS order_id,
               o.user_id,
               o.cinema_hall_id,
               o.status         AS order_status,
               o.payment_method,
               o.payment_status,
               o.total_amount,
               o.created_at,
               o.updated_at,
               os.id            AS os_id,
               os.order_id      AS os_order_id,
               os.price         AS os_price,
               s.id             AS seat_id,
               s.cinema_hall_id AS seat_cinema_hall_id,
               s.seat_number    AS seat_number,
               s.status         AS seat_status,
               s.price          AS seat_price
        FROM orders AS o
                 JOIN order_seat AS os ON o.id = os.order_id
                 JOIN seat AS s ON os.seat_id = s.id
        ORDER BY created_at DESC
    </select>
    <select id="findById" parameterType="java.lang.String" resultMap="OrderResultMap">
        SELECT o.id             AS order_id,
               o.user_id,
               o.cinema_hall_id,
               o.status         AS order_status,
               o.payment_method,
               o.payment_status,
               o.total_amount,
               o.created_at,
               o.updated_at,
               os.id            AS os_id,
               os.order_id      AS os_order_id,
               os.price         AS os_price,
               s.id             AS seat_id,
               s.cinema_hall_id AS seat_cinema_hall_id,
               s.seat_number    AS seat_number,
               s.status         AS seat_status,
               s.price          AS seat_price
        FROM orders AS o
                 JOIN order_seat AS os ON o.id = os.order_id
                 JOIN seat AS s ON os.seat_id = s.id
        WHERE o.id = #{id}
    </select>
    <select id="findOrderSeatsExisted" resultType="Boolean" parameterType="List">
        SELECT
        CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM order_seat os
        JOIN orders o ON os.order_id = o.id
        WHERE os.seat_id IN
        <foreach item="seat" collection="list" open="(" separator="," close=")">
            #{seat.id}
        </foreach>
        AND o.status = 'CONFIRMED'
    </select>
    <select id="findFirstByCustomerIdOrderByCreatedAtDesc" resultType="Order">
        SELECT o.id             AS order_id,
               o.user_id,
               o.cinema_hall_id,
               o.status         AS order_status,
               o.payment_method,
               o.payment_status,
               o.total_amount,
               o.created_at,
               o.updated_at,
               os.id            AS os_id,
               os.order_id      AS os_order_id,
               os.price         AS os_price,
               s.id             AS seat_id,
               s.cinema_hall_id AS seat_cinema_hall_id,
               s.seat_number    AS seat_number,
               s.status         AS seat_status,
               s.price          AS seat_price
        FROM orders AS o
                 JOIN order_seat AS os ON o.id = os.order_id
                 JOIN seat AS s ON os.seat_id = s.id
        WHERE o.user_id = #{customerId}
        ORDER BY o.created_at DESC LIMIT 1
    </select>
    <insert id="insert" parameterType="Order">
        INSERT INTO orders (id, user_id,
                            cinema_hall_id, status, payment_method, payment_status, total_amount)
        VALUES (#{orderId}, #{userId}, #{cinemaHallId}, #{orderStatus}, #{paymentMethod}, #{paymentStatus},
                #{totalAmount})

    </insert>
    <insert id="insertOrderSeat" parameterType="Order">
        INSERT INTO order_seat
        (order_id, seat_id, price)
        VALUES
        <foreach collection="seats" item="seat" separator=",">
            (#{seat.orderId}, #{seat.seat.id},#{seat.price})
        </foreach>
    </insert>
    <update id="updateOrderSeat" parameterType="map">
        UPDATE seat
        SET status = #{orderStatus}
        WHERE id IN (SELECT seat_id
                     FROM order_seat
                     WHERE order_id = #{orderId})

    </update>
    <update id="update" parameterType="Order">
        UPDATE orders
        <set>
            <if test="orderStatus != null">
                status = #{orderStatus},
            </if>
            <if test="paymentMethod != null">
                payment_method = #{paymentMethod},
            </if>
            <if test="paymentStatus != null">
                payment_status = #{paymentStatus},
            </if>
            updated_at = CURRENT_TIMESTAMP
        </set>
        WHERE id = #{orderId}
    </update>
    <delete id="delete" parameterType="java.lang.String">
        DELETE
        FROM orders
        WHERE id = #{orderId}
    </delete>
</mapper>