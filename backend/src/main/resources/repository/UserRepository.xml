<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.backend.repository.UserRepository">
    <resultMap id="RoleResultMap" type="Role">
        <id column="r_id" property="id"/>
        <result column="name" property="name"/>
        <result column="r_created" property="createdAt"/>
        <result column="r_updated" property="updatedAt"/>
    </resultMap>
    <resultMap id="UserResultMap" type="User">
        <id column="u_id" property="id"/>
        <result column="username" property="username"/>
        <result column="email" property="email"/>
        <result column="password" property="password"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <collection property="roles" ofType="Role" resultMap="RoleResultMap" javaType="java.util.HashSet"/>
    </resultMap>
    <select id="findAll" resultMap="UserResultMap" resultOrdered="true">
        SELECT DISTINCT u.id         AS u_id,
                        u.username,
                        u.email,
                        u.password,
                        u.created_at,
                        u.updated_at,
                        r.id         AS r_id,
                        r.name,
                        r.created_at AS r_created,
                        r.updated_at AS r_updated
        FROM users AS u
                 LEFT JOIN user_role AS ur ON u.id = ur.user_id
                 LEFT JOIN roles AS r ON ur.role_id = r.id
    </select>
    <select id="findById" parameterType="java.lang.Long" resultMap="UserResultMap">
        SELECT u.id         AS u_id,
               u.username,
               u.email,
               u.password,
               u.created_at,
               u.updated_at,
               r.id         AS r_id,
               r.name,
               r.created_at AS r_created,
               r.updated_at AS r_updated
        FROM users AS u
                 LEFT JOIN user_role AS ur ON u.id = ur.user_id
                 LEFT JOIN roles AS r ON ur.role_id = r.id
        WHERE u.id = #{id}
    </select>
    <select id="findByEmail" parameterType="java.lang.String" resultMap="UserResultMap">
        SELECT u.id         AS u_id,
               u.username,
               u.email,
               u.password,
               u.created_at,
               u.updated_at,
               r.id         AS r_id,
               r.name,
               r.created_at AS r_created,
               r.updated_at AS r_updated
        FROM users AS u
                 LEFT JOIN user_role AS ur ON u.id = ur.user_id
                 LEFT JOIN roles AS r ON ur.role_id = r.id
        WHERE u.email = #{email}
    </select>
    <select id="findByUsername" parameterType="java.lang.String" resultMap="UserResultMap">
        SELECT u.id         AS u_id,
               u.username,
               u.email,
               u.password,
               u.created_at,
               u.updated_at,
               r.id         AS r_id,
               r.name,
               r.created_at AS r_created,
               r.updated_at AS r_updated
        FROM users AS u
                 LEFT JOIN user_role AS ur ON u.id = ur.user_id
                 LEFT JOIN roles AS r ON ur.role_id = r.id
        WHERE u.username = #{username}
    </select>
    <insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="User">
        INSERT INTO users (username, email, password)
        VALUES (#{username}, #{email}, #{password})
    </insert>
    <insert id="insertUserRoles" parameterType="User">
        INSERT INTO user_role (user_id, role_id) VALUES
        <foreach collection="roles" item="role" separator=",">
            (#{userId}, #{role.id})
        </foreach>
    </insert>
    <update id="update" parameterType="User">
        UPDATE users
        <set>
            <if test="username != null">
                username = #{username},
            </if>
            <if test="email != null">
                email = #{email},
            </if>
            <if test="password != null">
                password = #{password},
            </if>
            updated_at = #{updatedAt}
        </set>
        WHERE id = #{id}
    </update>
    <delete id="delete" parameterType="java.lang.Long">
        DELETE
        FROM users
        WHERE id = #{id}
    </delete>
    <delete id="deleteRolesByUserId" parameterType="java.lang.Long">
        DELETE
        FROM user_role
        WHERE user_id = #{id}
    </delete>
</mapper>